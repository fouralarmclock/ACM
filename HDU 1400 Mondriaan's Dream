#include<iostream>
#include<cstring>
#include<cmath>
using namespace std;
long long int map[101][2100];
void dp(int ,int,int,int);
int N,M; 
int r,c;
int m;
int flag;
int main()
{
	while(cin>>N>>M){
        if(N == 0 && M == 0) break;
        m = min(N,M);
		r = pow(2,min(N,M));
		c = max(N,M);
	   // cout<<r<<"  "<<c<<endl;
		memset(map,0,sizeof(map));
		for(int j=0;j<=r-1;j++) map[1][j] = 1;
		for(int i=0;i<=c;i++){
			if(i == 1) dp(i,0,0,0);
			else{
				for(int j=0;j<=r-1;j++){
					if(map[i][j] != 0){
						dp(i,0,j,0);
					}
				}
			}
		}
		
		cout<<map[c+1][0]<<endl;
	}
}

void dp(int i,int j,int state,int next){
 
 
    //cout<<i<<"      "<<j<<endl;
	if(j == m){
		//cout<<next<<endl;
		map[i+1][next] += map[i][state];
		return ;
	} 
	
	if(j+1 <= m && ((1<<j) & state) >  0) dp(i,j+1,state,next);
	if(j+1 <= m && ((1<<j) & state) == 0) dp(i,j+1,state,next|(1<<j));
	if(j+2 <= m &&(((1<<j) & state) == 0) && ((1<<(1+j)&state) == 0)) dp(i,j+2,state,next); 
	
	
	    
	
}
